<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Southerneer</title>
    <description>Southerneer is a technology company dedicated to making beautifully functional things on the web.
</description>
    <link>http://southerneer.com/</link>
    <atom:link href="http://southerneer.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 21 Nov 2014 10:40:21 -0500</pubDate>
    <lastBuildDate>Fri, 21 Nov 2014 10:40:21 -0500</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Syllabus Revisited</title>
        <description>&lt;p&gt;That &lt;a href=&quot;/syllabus.html&quot;&gt;syllabus&lt;/a&gt; may have been a tad over-ambitious and ultimately unrealistic. While it would be cool to learn a new programming language &lt;em&gt;and&lt;/em&gt; a new data storage paradigm at the same time, that would just be too much to bite off at one time and it would take soooo long before I could actually build anything significant with these new tools. Also, I’m currently wading through the quagmire of another important aspect of web development – server administration. It can be…maddening.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/frustrated.gif&quot; alt=&quot;Frustrated&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In past posts I’ve mentioned my love-hate relationship with Microsoft’s Azure cloud system. While Microsoft offers a wide variety of cloud services to the open source crowd, the only first-class citizens in Azure land are pure Microsoft. I base this claim mostly on &lt;a href=&quot;http://azure.microsoft.com/en-us/services/websites/&quot;&gt;Azure websites&lt;/a&gt; in particular. They make it easy to spin up a bunch of different flavors of web platforms in a few seconds. This is great for testing and demo purposes. But the devil is in the details and for non-Microsoft applications Azure just isn’t set up for primetime.&lt;/p&gt;

&lt;p&gt;OK, maybe that’s being a little harsh on Azure because I’m basing my opinion on a very specific corner of the Azure matrix: Wordpress. Tweaking the performance of Wordpress sites running on Azure websites is a nightmare since the backing MySQL database is a third-party bolt-on from &lt;a href=&quot;https://www.cleardb.com/&quot;&gt;ClearDB&lt;/a&gt;. To be fair, the base level db is free, and it’s hard to beat free, but it’s also hard to upgrade that base db to something decent without spending a boatload of money compared to similar options from other cloud providers like AWS or Google. Take a look at the &lt;a href=&quot;https://www.cleardb.com/pricing/multitenant.view&quot;&gt;pricing plan&lt;/a&gt;: the free db is 5MB and up to 10 connections. $10/month gets you 1GB of space and 15 connections. For the same amount of money spent on an AWS RDS instance you could get a 10+ GB instance without any connection throttling and full admin privileges &lt;em&gt;and&lt;/em&gt; you can scale up or down with the push of a button.&lt;/p&gt;

&lt;p&gt;In summation, I’ve grown frustrated with MySQL db administration on Azure so I’ve taken the somewhat drastic step of setting up a full LAMP VM on Azure and just hosting all my Wordpress sites there. OK, not really an earth-shattering feat, but for me it was a big bite that required lots of chewing. I’m certainly no Linux wiz and I was getting deep into shell commands, adjusting Apache configs, setting up MySQL dbs, etc. It was trying. Ultimately, though, I’m really happy with my new setup and it vastly outpaces the old setup on Azure websites. All those Wordpress plugins are still pretty inefficient, but they don’t take a day for each db roundtrip anymore. You should now notice a much more pleasant user experience on &lt;a href=&quot;http://fiveonsundays.com&quot;&gt;5 on Sundays&lt;/a&gt;, &lt;a href=&quot;http://overunderga.me&quot;&gt;Over Under Game&lt;/a&gt;, and this site (ok, no Wordpress here, but still).&lt;/p&gt;

&lt;p&gt;One of the really nice things about Azure websites was the baked in &lt;a href=&quot;http://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/&quot;&gt;Git auto-deployment&lt;/a&gt; functionality. How could I get along in life without this nugget of efficiency?! Well, I was able to recreate the same effect on my custom LAMP server with a nice little open source PHP library: &lt;a href=&quot;https://github.com/markomarkovic/simple-php-git-deploy&quot;&gt;Simple PHP Git deploy&lt;/a&gt;. All I had to do was add the files on my server, set a few config variables, and point my &lt;a href=&quot;https://developer.github.com/webhooks/&quot;&gt;Git post-receive hook&lt;/a&gt; to the php endpoint. Right? Eh, not so fast. I’ll tackle the headache and subsequent revelation of getting everything to work in my next post. Stay tuned.&lt;/p&gt;

&lt;p&gt;Whoa, that was a bit of diversion. Back to the topic at hand: learning new stuff. I’ve ditched the idea of learning MongoDB because I’ve realized that in addition to learning Ruby I’ll have to get a lot more proficient at all kinds of server admin type stuff. That means a lot more shell scripting, deployment planning, and db migration in my future. Ruby on Rails is great for getting a basic web stack up and running quickly, but if I want to do anything of consequence then I’ll need to learn what’s going on behind the scenes. So that’s the new plan.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://southerneer.com/syllabus-revisited.html</link>
        <guid isPermaLink="true">http://southerneer.com/syllabus-revisited.html</guid>
        
        
      </item>
    
      <item>
        <title>Syllabus</title>
        <description>&lt;p&gt;Enough of the self-loathing of that &lt;a href=&quot;/a-confession.html&quot;&gt;last post&lt;/a&gt;. I’m smart and I’ve got plenty of time on my hands and there has never been a better time to teach yourself all kinds of web development techniques. Since leaving the humdrum corporate .NET dev world a little over a year ago I’ve just sort of stumbled from one technology to the other learning just enough to smash together a project in the time alotted. All the front-end stuff like HTML, CSS, and Javascript with its various popular libraries I was already fairly comfortable with, but the backend was another story. Mostly I cobbled together a mess of PHP and MySql. Rewriting already horribly written Wordpress themes certainly didn’t help in the learning process…in fact it probably hindered it.&lt;/p&gt;

&lt;p&gt;I persisted, nonetheless, with PHP and MySql and using the &lt;a href=&quot;https://ellislab.com/codeigniter&quot;&gt;CodeIgniter&lt;/a&gt; (whoa! ownership got transferred again!) framework I built out the first version of the &lt;a href=&quot;http://overundergame.com&quot;&gt;Over Under game&lt;/a&gt;. While CodeIgniter did simplify a lot of common functionality like user registration, form handling, and routing, I always had the nagging feeling that it could be better. I found myself spending a lot of time digging deep into MySql (definitely not my strong suit) to wrest my data from the database. And while understanding how your data fits together and how to store it both logically and efficiently is important, I felt like I got way too bogged down in the details which prevented me from actually making progress on my grand idea.&lt;/p&gt;

&lt;p&gt;I’m certainly not the only developer who has felt this pain. &lt;a href=&quot;http://en.wikipedia.org/wiki/Database_normalization&quot;&gt;Database normalization&lt;/a&gt; is all well and good, but sometimes I just want to store and retrieve data and that’s it…good great Grand WONDERFUL!&lt;/p&gt;

&lt;div class=&quot;vidContainer&quot;&gt;
	&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/r0f1Aqk1XHI?start=6&amp;amp;end=13&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;To that end, I’m devoting the next couple months to learning &lt;a href=&quot;http://en.wikipedia.org/wiki/NoSQL&quot;&gt;NoSql&lt;/a&gt; concepts in the form of &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;. From what I hear this takes away the pain of restructuring your carefully thought out data models for “proper” normalized storage.&lt;/p&gt;

&lt;p&gt;So I could definitely learn up on MongoDB and use PHP to do the backend logic, but while I’m at it, I might as well go all the way and learn a new backend language. &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; is what all the cool kids are using these days and I want to be cool. It’s got a huge following which brings along with it lots of community support and, perhaps more importantly, there are lots of free tutorials out there for getting up to speed quickly. And then there’s the dense, comprehensive, end-all be-all of Ruby development, the Ruby bible: &lt;a href=&quot;http://www.amazon.com/gp/product/1937785491/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1937785491&amp;amp;linkCode=as2&amp;amp;tag=southerneer-20&amp;amp;linkId=VSCPCPFRAIKUYDPO&quot;&gt;the Pickaxe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ruby3-small.jpg&quot; style=&quot;display:block; margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So I’m going to learn a totally new database paradigm AND a totally new language and framework. That sounds a bit daunting and I’ve been dragging my feet over the last few days because I keep thinking that it’ll take forever. But if I break it down it doesn’t sound so bad at all. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 1: November 11 - 15&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read and run through example code of part 1 of the Pickaxe: Facets of Ruby&lt;/li&gt;
  &lt;li&gt;Start running through the &lt;a href=&quot;http://try.mongodb.org/&quot;&gt;MongoDB trial site&lt;/a&gt;. I have no idea how comprehensive the tutorial is so I’ll just say “start” for now and update as I go along&lt;/li&gt;
  &lt;li&gt;Get the basic example program from the &lt;a href=&quot;http://guides.rubyonrails.org/getting_started.html&quot;&gt;Ruby on Rails guide&lt;/a&gt; up and running. I’m already at step 5 from a few weeks back so basically I’ll just be revisiting this and refreshing my mind on what I learned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Week 2: November 16-22&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read part 2 of the Pickaxe: Ruby In Its Setting&lt;/li&gt;
  &lt;li&gt;Complete the MongoDB tutorial and set up an instance on my laptop.&lt;/li&gt;
  &lt;li&gt;Take a look at the Over Under Game as it stands now and think through the structure of the data through the lens of NoSQL. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Week3: November 23-29&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read part 3 of the Pickaxe: Ruby Crystallized&lt;/li&gt;
  &lt;li&gt;Finish mapping out Over Under data structures and begin implementing them in a rewrite using Ruby on Rails&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have no idea how much time will need to be devoted to each task throughout the 3 weeks, but I’ll keep track of my progress and update with future posts so that someone else hoping to approach a similar challenge &lt;em&gt;will&lt;/em&gt; have a good idea of how much time and effort is involved.&lt;/p&gt;

&lt;p&gt;Bonus: in the course of “researching” for this post I stumbled across the Hot Tub Time Machine 2 trailer. Be forewarned, this trailer is NSFW, but the improvised (?) nerd song is a dose of pure genius.&lt;/p&gt;

&lt;div class=&quot;vidContainer&quot;&gt;
	&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/nWa4INxk4y4?start=168&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;script src=&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/fitvids/1.1.0/jquery.fitvids.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
	$(function() {
		$(&#39;.vidContainer&#39;).fitVids();
	});
&lt;/script&gt;

</description>
        <pubDate>Tue, 11 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://southerneer.com/syllabus.html</link>
        <guid isPermaLink="true">http://southerneer.com/syllabus.html</guid>
        
        
      </item>
    
      <item>
        <title>A Confession</title>
        <description>&lt;p&gt;I’m a hack. Not a hacker…a hack. I’m not particularly good or experienced at software development and this is my professed career. I have spent a lot of time doing that job (the past 9 years) but never in a very determined or focus way. I’ve claimed the job title of “consultant” and in that I was decent and successful because I’m smart and courteous and I could communicate effectively with normal people (the business) and the nerds (the developers). This is a valuable skill in its own right, but even in that job I claimed to be and at times thought I actually was a developer or software engineer.&lt;/p&gt;

&lt;p&gt;If I wanted to really pile on (and why not, this is a confession) I could add in the 4 years of college where I “studied” Computer Science at UNC and graduated with a BS. I’m official…but that’s about it. I say “studied” because I didn’t too much of that in college. I spent most of my time &lt;a href=&quot;http://youtu.be/Wgxvs02oi2Q?t=1m33s&quot;&gt;occupying various administration buildings&lt;/a&gt;, playing ultimate frisbee, and looking at all the pretty girls walking around campus. Occasionally I would crack a book or start on a project only to realize that I was woefully behind and then promptly revert back to a general malaise of procrastination. I was overwhelmed by a combination of harder classes and distraction. Added to that, I was never particularly passionate about computers and software…nothing compared to my classmates who threw themselves into their classwork and spent late nights at hackathons and discussed the latest tech news in CS club meetings. At best you could call me a &lt;a href=&quot;http://en.wikipedia.org/wiki/Brogrammer&quot;&gt;brogrammer&lt;/a&gt;, a “sociable programmer”. Just way more on the sociable side.&lt;/p&gt;

&lt;p&gt;Sounds pretty bleak, right? I should probably give up and just go back to smiling and clenching my teeth and being a pretty face as a consultant. I’m good at it, I would continue to be successful at it, and I could probably have a nice little life laid out for myself. Except for the fact that I want to &lt;strong&gt;BUILD STUFF&lt;/strong&gt;. I have ideas. Like the &lt;a href=&quot;http://overundergame.com&quot;&gt;Over Under Game&lt;/a&gt;. And I can’t make these ideas a reality without &lt;a href=&quot;http://youtu.be/XsiiIa6bs9I?t=15s&quot;&gt;computer hacking skillz&lt;/a&gt;. Well I guess I could pay or otherwise convince skilled developers to do the work for me…but I have no money and I’m not a particularly compelling orator and I want to build the stuff myself, dammit!&lt;/p&gt;

&lt;p&gt;And so that’s what I’m doing. I’m going back to basics and relearning all the scattered knowledge I’d gathered about web development in the corporate .NET world. I’m not relying on big bloated IDEs to hide away the details of what I’m working on anymore. I’m managing every detail…from &lt;a href=&quot;http://www.cryptonomicon.com/beginning.html&quot;&gt;the command line&lt;/a&gt;. I’m bound and determined to be a true developer and to use those skills to make cool things…and maybe make a living along the way.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://southerneer.com/a-confession.html</link>
        <guid isPermaLink="true">http://southerneer.com/a-confession.html</guid>
        
        
      </item>
    
      <item>
        <title>This Jekyll Thing</title>
        <description>&lt;p&gt;For the past year I have been engaged in a tumultuous relationship with Wordpress. It all started when I left my comfortable job as a Microsoft consultant in Charlotte to join my friend’s startup company &lt;a href=&quot;http://redwood-inc.com&quot;&gt;Redwood&lt;/a&gt; in Seoul, South Korea. Up to that point I had never had to make too many important decisions on projects I’d worked on. Mostly I just bounced from office to office and worked off of whatever technology stack (.NET primarily) they were using at the time. Those were all mid-sized to large corporations where a significant amount of “technological inertia” was already in place and who was I to buck the trend? Well, in my new job the slate was clean and I was responsible for setting the trend.&lt;/p&gt;

&lt;p&gt;Before I arrived on the scene Redwood had taken on a few little web projects where they would cobble together some different third-party widgets and approximate a working thing. Wordpress was a big part of this recipe. I was vaguely familiar with Wordpress from setting up my personal blog and a few dinky websites for friends, but I had never dug too far into its guts or made heavy modifications. Being blissfully unaware I figured Wordpress would be as good a platform as any to put together a dynamic, beautiful company website. In doing so I stepped into Wordpress hell.&lt;/p&gt;

&lt;div style=&quot;background: url(/assets/jekyll.jpg); height: 200px; background-attachment: fixed; background-size: cover;&quot;&gt;
&lt;/div&gt;

&lt;p&gt;You see, my fellow Redwoodians have strong opinions about how their website should look and act but only in a hindsight sort of way. So while we started off with a clear vision of utilizing a nice little Wordpress theme with a bit of added functionality from plugins, we ended up spending hour after hour making increasingly tedious style tweaks on a crufty theme codebase. What I learned all too well is that what shiny plugins like &lt;a href=&quot;http://codecanyon.net/item/slider-revolution-responsive-wordpress-plugin/2751380&quot;&gt;Revolution Slider&lt;/a&gt; or extensive theme options add in flexibility and “user friendliness” they steal from the efficiencies of traditional software development. So if I needed to make a change to a style element I would have to hunt it down in the various stylesheets employed by the theme (assuming it wasn’t a dynamic setting in the theme’s options), type it into the web text editor, save, and wait a few seconds for the page to refresh. This is no big deal for a spot change, but if you’re really digging in then those 2 or 3 seconds for each change/test iteration become maddening. And of course we went through several rounds of edits with minds changing back and forth constantly. What would have been a cinch with a proper version control system and deployment pipeline was slowed to a crawl in Wordpress.&lt;/p&gt;

&lt;p&gt;And if the development process wasn’t enough of a bummer, the end result was sloooooow. I had free credits on Windows Azure from my previous job so it seemed like a no-brainer as a place to deploy our site. Azure Websites offers a Wordpress quick-start template that’s great for getting things off the ground but the ClearDB MySql database plan that comes with it is either incredibly dinky at the free level or incredibly expensive for not much added functionality at the pay levels. And since a lot of Wordpress caching plugins are hampered by the fact that Azure Websites run as PHP on top of IIS, there were lots of db roundtrips on every pageload (especially in the course of development).&lt;/p&gt;

&lt;p&gt;Just today I finished off the last of the tweaks on version 2 of our site (again in Wordpress) and I’ve vowed to never again stray into Wordpress land unless it’s in the absence of bloated plugins and with a proper versioning and deployment scheme. You know, something like &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 05 Nov 2014 10:03:00 -0500</pubDate>
        <link>http://southerneer.com/this-jekyll-thing.html</link>
        <guid isPermaLink="true">http://southerneer.com/this-jekyll-thing.html</guid>
        
        
      </item>
    
      <item>
        <title>Wrangling Wordpress Cloud</title>
        <description>&lt;p&gt;Wordpress is a fine tool for creating blog-based websites. It is a mature and popular platform which has the nice side benefit of lots of theme choices. Some themes have &quot;sophisticated&quot; configuration options that make it relatively easy for the average website user to customize the look and feel of the site. Just click a few buttons and slide a few sliders and you can make some pretty cool changes to a base theme. The nasty side of all these clever options is that they add a lot of overhead to the site&#39;s download footprint. I have had the unpleasant experience of my coworkers using these themes to get 95% of what they want in a website design and asking me to tweak the code to get the last 5% of what they want. This creates a huge headache.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Nov 2014 00:00:00 -0500</pubDate>
        <link>http://southerneer.com/wrangling-wordpress-cloud.html</link>
        <guid isPermaLink="true">http://southerneer.com/wrangling-wordpress-cloud.html</guid>
        
        
      </item>
    
      <item>
        <title>Talking to normal people</title>
        <description>&lt;p&gt;I&#39;m an engineer by profession. And for better or worse, I&#39;m an engineer by train of thought. In particular, I have a very specific notion of &quot;truth&quot; and &quot;correct&quot;. I don&#39;t like to claim that I know how something works without having tested it myself or at least having it explained thoroughly by someone who has.&lt;/p&gt;
&lt;p&gt;Let&#39;s say I&#39;m working on a web page and I need to add a button to pop up a message to the user. Simple. This is a common piece of functionality that I&#39;ve implemented a million times previously and I could write that code in my sleep. But if I were to do it right now I would still test it. I would have to. Because if you&#39;re a software engineer and you don&#39;t test your work then your work will suck. I prefer that my work not suck so I make sure that every little thing functions correctly before moving on.&lt;/p&gt;
&lt;p&gt;This kind of thinking isn&#39;t exclusive to engineers, but the nature of the job (always building stuff) and the consequences for the simplest of mistakes (a misplaced semi-colon or an off-by-one math error) combined with the innate tendencies of folks who are drawn to a life of messing with 1s and 0s make for peculiar and somewhat obsessive personalities.&lt;/p&gt;
&lt;p&gt;What am I getting at? Well, this kind of &quot;precise&quot; thinking inevitably bleeds over into completely unrelated aspects of life...like everyday conversations. If I realize that someone is telling me something that is technically incorrect it is reeeeally hard to resist correcting them. It&#39;s the &quot;&lt;a href=&quot;http://tirania.org/blog/archive/2011/Feb-17.html&quot;&gt;well actually&lt;/a&gt;&quot; phenomenon.&lt;/p&gt;
&lt;p&gt;Person: &quot;You&#39;re feeling sick? You should drink this MegaVitaGreenJuice blend. It&#39;s got so much vitamin C that it&#39;s bound to help!&quot;&lt;br /&gt;
Me: &quot;Well actually, your body can only absorb so much vitamin C and the extra 400% of the daily allowance in that drink will just get flushed out the next time I take a piss.&quot;&lt;br /&gt;
Person: &quot;...&quot;&lt;br /&gt;
Me: &quot;I&#39;m just sayin...but thanks for the tip and the general good vibes! I swear I&#39;m not a dick!&quot;&lt;/p&gt;
&lt;p&gt;This deep-rooted impulse to correct even the most innocuous and well meaning assertions almost invariably makes me sound like a prick. And because I realize this in the moment as I&#39;m well-actually-ing some poor soul, I hesitate and try to soften the correction thus making it sound even &lt;em&gt;more&lt;/em&gt; condescending. It&#39;s a vicious problem.&lt;/p&gt;
&lt;p&gt;I&#39;ve been thinking about this a lot these days because I don&#39;t hang out with many (any?) engineer thinkers on a regular basis. I can&#39;t get my daily allotment of truth speaking out of the way and it boils over into conversation with &quot;normal people&quot;. Let this post be an open apology to those people...I&#39;m sorry and I&#39;m working on it.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jul 2014 21:59:07 -0400</pubDate>
        <link>http://southerneer.com/talking-normal-people.html</link>
        <guid isPermaLink="true">http://southerneer.com/talking-normal-people.html</guid>
        
        
        <category>coding</category>
        
        <category>psychology</category>
        
      </item>
    
      <item>
        <title>Lone Engineer</title>
        <description>&lt;p&gt;The only technology worker in a non-technology company&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They can&#39;t properly appreciate your successes&lt;/li&gt;
&lt;li&gt;They only pay attention when you fail&lt;/li&gt;
&lt;li&gt;You can&#39;t explain your failures&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 23 Jul 2014 00:00:00 -0400</pubDate>
        <link>http://southerneer.com/lone-engineer.html</link>
        <guid isPermaLink="true">http://southerneer.com/lone-engineer.html</guid>
        
        
      </item>
    
      <item>
        <title>Currently active and you can not deactivate it</title>
        <description>&lt;p&gt;&amp;lt;Rant&amp;gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;For better or worse, my current job requires at least a cursory knowledge of how to set up and run Facebook Ads. This is true for many other people&#39;s jobs. The ad platform is constantly changing and often broken to some extent. New bugs arise and the documentation is constantly outdated and behind the changes. Facebook makes a lot of money off of these ads but they&#39;re under constant pressure to improve the ads platform (to make more money to satisfy investors). The platform is just a chunk of software (albeit massive) which means it can change as fast as Facebook&#39;s engineers can crank out new code and the documentation is always a few iterations behind. Being a developer I understand that it&#39;s a tough problem to solve but Facebook has the resources to do this way better. Step up your game, dawg.&lt;/p&gt;
&lt;p&gt;&amp;lt;/Rant&amp;gt;&lt;/p&gt;
&lt;p&gt;All this is to say that the Facebook Ad platform is a moving target with constantly outdated documentation. Blogs (like this one) are the best way to keep abreast of the ever-changing landscape so as not to get completely lost and confused. To that end I&#39;m posting my theory on this strange message I saw in Facebook Power Editor...&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-1321&quot; src=&quot;/assets/Screen-Shot-2014-07-09-at-11.33.35-AM.png&quot; alt=&quot;Power editor screenshot&quot; width=&quot;497&quot; height=&quot;112&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As of this writing, there&#39;s nothing in the documentation to explain this bewildering message. A quick Google search of the phrase &quot;currently active and you cannot deactivate it&quot; reveals...nothing. My theory is that since my ad is under review it is in a limbo state and no changes can be made to it. Once it&#39;s been approved I can deactivate or make any number of other changes. Or it will get rejected and get deactivated. Either way I have to wait and hypothesize. Hopefully this post (and subsequent comments ;) ) will shed some light on this small mystery.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Jul 2014 00:44:02 -0400</pubDate>
        <link>http://southerneer.com/currently-active-deactivate.html</link>
        <guid isPermaLink="true">http://southerneer.com/currently-active-deactivate.html</guid>
        
        <category>facebook</category>
        
        <category>job</category>
        
        <category>work</category>
        
        
      </item>
    
      <item>
        <title>Azure websites in Seoul</title>
        <description>&lt;p&gt;Over the past few months I&#39;ve had to hack together a few Wordpress websites. I&#39;ve hosted everything in Azure Websites to simplify the backend administration and this has worked out pretty well for the most part. One thing about the process has tickled the back of my mind though: am I setting up my sites in such a way that they&#39;re served efficiently to end-users?&lt;/p&gt;
&lt;p&gt;Right now I&#39;m based in Seoul and a few of the websites we&#39;ve set up (like &lt;a href=&quot;http://koreaultimate.net/&quot;&gt;KUPA&lt;/a&gt; and &lt;a href=&quot;http://redwoodshop.co.kr/&quot;&gt;Wooden Bow Ties&lt;/a&gt;) have content aimed at South Koreans. Unfortunately, Microsoft doesn&#39;t have any data centers in South Korea but there are &lt;a href=&quot;http://azure.microsoft.com/en-us/regions/#asia-pacific&quot;&gt;nearby choices&lt;/a&gt; of East Asia (Hong Kong), Southeast Asia (Singapore), and West Japan (Osaka). As the crow flies, Osaka is much closer to Seoul than the other two, but data doesn&#39;t always travel in a direct line so I decided to do a quick latency test of a typical Wordpress installation. The results were a bit surprising.&lt;/p&gt;
&lt;p&gt;For my test I set up two identical Wordpress sites -- one hosted in the Japan West datacenter and one hosted in the East Asia datacenter. Then, using Google Chrome&#39;s &lt;a href=&quot;https://developers.google.com/chrome-developer-tools/&quot;&gt;dev tools&lt;/a&gt;, I measured the latency of requests for the same Wordpress Admin page. I chose to only compare requests that returned a 304 (not modified) response since this removes the variable of server processing and isolates the data roundtrip time. Here are the results:&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;East Asia&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.southerneer.com/wp-content/uploads/2014/04/3easia.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1081&quot; src=&quot;/assets/3easia.png&quot; alt=&quot;3easia&quot; width=&quot;705&quot; height=&quot;157&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.southerneer.com/wp-content/uploads/2014/04/thickbox-easia.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1101&quot; src=&quot;/assets/thickbox-easia.png&quot; alt=&quot;thickbox-easia&quot; width=&quot;702&quot; height=&quot;73&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;West Japan&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.southerneer.com/wp-content/uploads/2014/04/thickbox-japan.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1071&quot; src=&quot;/assets/3japan.png&quot; alt=&quot;3japan&quot; width=&quot;713&quot; height=&quot;156&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.southerneer.com/wp-content/uploads/2014/04/thickbox-japan.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1091&quot; src=&quot;/assets/thickbox-japan.png&quot; alt=&quot;thickbox-japan&quot; width=&quot;710&quot; height=&quot;71&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Comparing the latency metrics (in the far right column) you&#39;ll notice that requests to West Japan took significantly longer than the same requests to East Asia. In this simple example the time difference is negligible, but in a typical Wordpress page request that serves up many different files (stylesheets, images, fonts, html, javascript, etc) the extra time would definitely add up to a significantly longer wait on each page load.&lt;/p&gt;
&lt;p&gt;The upshot: any websites hosted on Azure that plan to serve information to users in Seoul should target the East Asia datacenter. While the West Japan datacenter might be geographically closer, there is obviously some routing inefficiency between there and Seoul which makes it a less desirable option.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Apr 2014 18:39:52 -0400</pubDate>
        <link>http://southerneer.com/azure-websites-in-seoul.html</link>
        <guid isPermaLink="true">http://southerneer.com/azure-websites-in-seoul.html</guid>
        
        <category>azure websites</category>
        
        <category>korea</category>
        
        <category>web dev</category>
        
        
        <category>coding</category>
        
      </item>
    
  </channel>
</rss>
